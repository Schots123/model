set fullMonths /
  'Januar'
  'Februar'
  'März'
  'April'
  'Mai'
  'Juni'
  'Juli'
  'August'
  'September'
  'Oktober'
  'November'
  'Dezember'
/;

File results / "%random%" /;
results.lw = 0;
put results;
put "{"
put '"model_status":',  Fruchtfolge.modelstat, "," /;
put '"solver_status":', Fruchtfolge.solvestat, "," /;

if ( (Fruchtfolge.modelstat ne 1),
    put '"error_message": "Infeasible model."' /;
  ELSE
    put '"objective":', v_totGM.l, "," /;
* add warnings if slack variables have non 0 levels
    put '"warnings": [' /;

    if ((sum(curCrops, v_devShares.l(curCrops)) > 0),
      loop(curCrops,
        put$(v_devShares.l(curCrops) > 0) '"Maximaler Fruchtfolgeanteil von ', curCrops.tl, ' konnte nicht eingehalten werden.",'/;
      )
    );
    if ((v_devEfa5.l > 0),
      put '"Konnte 5% ÖVF nicht einhalten. Prüfen, ob Sommerungen vorhanden sind, bzw. ob ZF Anbau erlaubt wurde.",' /;
    );
    if ((v_devEfa75.l > 0),
      put '"Konnte 75% Greening-Regel nicht einhalten",' /;
    );
    if ((v_devEfa95.l > 0),
      put '"Konnte 95% Greening-Regel nicht einhalten",' /;
    );
    if ((sum(curPlots, v_devOneCrop.l(curPlots)) > 0),
      loop(curPlots,
        put$(v_devOneCrop.l(curPlots) > 0) '"Keine mögliche Nachfrucht für ', curPlots.tl, ' mit den aktuellen Anbaupause/Nachfruchtwirkungen.",'/;
      )
    );
    $$iftheni.constraints defined constraints
      if ((sum((constraints,curCrops,curCrops1), v_devUserShares.l(constraints,curCrops,curCrops1)) > 0),
        loop((constraints,curCrops,curCrops1),
          put$(v_devUserShares.l(constraints,curCrops,curCrops1) > 0) '"Konnte Restriktion für ', constraints.tl, ' nicht einhalten.",'/;
        ) 
      ); 
    $$endif.constraints
    $$iftheni.labour defined p_availLabour
      if ((sum(months, v_devLabour.l(months)) > 0),
        loop((months,fullMonths) $ (months.pos eq fullMonths.pos),
          put$(v_devLabour.l(months) > 0) '"Konnte maximale Arbeitszeit für ', fullMonths.tl, ' nicht einhalten.",'/;
        )
      );
    $$endif.labour

    put '],' /; 
* write recommendations from optimisation to JSON file
    put '"recommendation":', "{"/;
    loop((curPlots),
      loop(curCrops,
        put$(v_binCropPlot.l(curCrops,curPlots) > 0) '"', curPlots.tl, '":', '"', curCrops.tl, '"' /
      )
      put$(curPlots.pos < card(curPlots)) "," /
    );
    put "}," /;
* write catch crop recommendations from optimisation to JSON file
    put '"catchCrop":', "{"/;
    loop((curPlots),
      put$(sum(curCrops, v_binCatchCrop.l(curCrops,curPlots)) > 0) '"', curPlots.tl, '":', 'true' /
      put$(sum(curCrops, v_binCatchCrop.l(curCrops,curPlots)) eq 0) '"', curPlots.tl, '":', 'false' /
      put$(curPlots.pos < card(curPlots)) "," /
    );
    put "}" /;
);

put "}" /;
putclose;
