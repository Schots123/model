set fullMonths /
  'Januar'
  'Februar'
  'März'
  'April'
  'Mai'
  'Juni'
  'Juli'
  'August'
  'September'
  'Oktober'
  'November'
  'Dezember'
/;
set bool / true, false /;
set toBool(*,bool) /
  catchCrop.true  YES
  noCatchCrop.false YES
  autumnFert.true YES
  noAutumnFert.false YES
/;

scalar 
  warningsCount
  curWarning
;
warningsCount = sum(curCrops $ v_devShares.l(curCrops), 1)
                 + 1 $ v_devEfa5.l 
                 + 1 $ v_devEfa75.l 
                 + 1 $ v_devEfa95.l
                 + sum(curPlots $ v_devOneCrop.l(curPlots), 1)
                 + sum((manType,months) $ v_manSlack.l(manType,months), 1)
                 + 1 $ v_170Slack.l
                 + sum(curPlots $ v_170PlotSlack.l(curPlots), 1)
                 $$iftheni.constraints defined constraints
                   + sum((constraints,curCrops,curCrops1) $ v_devUserShares.l(constraints,curCrops,curCrops1), 1)
                 $$endif.constraints
                 $$iftheni.labour defined p_availLabour
                   + sum(months $ v_devLabour.l(months), 1)
                 $$endif.labour
;
curWarning = 0;

display warningsCount,curWarning;
File results / "%random%" /;
results.lw = 0;
put results;
put "{"
put '"model_status":',  Fruchtfolge.modelstat, "," /;
put '"solver_status":', Fruchtfolge.solvestat, "," /;

if ( ((Fruchtfolge.modelstat ne 1) and (Fruchtfolge.modelstat ne 8)),
    put '"error_message": "Infeasible model."' /;
  ELSE
    put '"objective":', v_totGM.l, "," /;
* add warnings if slack variables have non 0 levels
    put '"warnings": [' /;

    if ((sum(curCrops, v_devShares.l(curCrops)) > 0),
      loop(curCrops $ v_devShares.l(curCrops),
        put$(v_devShares.l(curCrops) > 0) '"Maximaler Fruchtfolgeanteil von ', curCrops.tl, ' konnte nicht eingehalten werden."'/;
        curWarning = curWarning + 1;
        put$(curWarning < warningsCount) "," /;
      )
    );
    if ((v_devEfa5.l > 0),
      put '"Konnte 5% ÖVF nicht einhalten. Prüfen, ob Sommerungen vorhanden sind, bzw. ob ZF Anbau erlaubt wurde."' /;
      curWarning = curWarning + 1;
      put$(curWarning < warningsCount) "," /;
    );
    if ((v_devEfa75.l > 0),
      put '"Konnte 75% Greening-Regel nicht einhalten"' /;
      curWarning = curWarning + 1;
      put$(curWarning < warningsCount) "," /;
    );
    if ((v_devEfa95.l > 0),
      put '"Konnte 95% Greening-Regel nicht einhalten"' /;
      curWarning = curWarning + 1;
      put$(curWarning < warningsCount) "," /;
    );
    if ((sum(curPlots, v_devOneCrop.l(curPlots)) > 0),
      loop(curPlots $ v_devOneCrop.l(curPlots),
        put$(v_devOneCrop.l(curPlots) > 0) '"Keine mögliche Nachfrucht für ', curPlots.tl, ' mit den aktuellen Anbaupause/Nachfruchtwirkungen."'/;
        curWarning = curWarning + 1;
        put$(curWarning < warningsCount) "," /;
      )
    );
    if ((sum((manType,months), v_manSlack.l(manType,months)) > 0),
      loop(manType,
        loop (months,
         put$(v_manSlack.l(manType,months) > 0) '"Nicht ausreichend org. Dünger (', v_manSlack.l(manType,months), 'm3) im Monat', months.tl, '"' /;
         curWarning $ (v_manSlack.l(manType,months) > 0) = curWarning + 1;
         put$(curWarning < warningsCount) "," /;
        );
      )
    );
    if ((v_170Slack.l > 0),
      put '"Konnte 170kg org. N-Dünger-Regel nicht einhalten"' /;
      curWarning = curWarning + 1;
      put$(curWarning < warningsCount) "," /;
    );
    if ((sum(curPlots, v_170PlotSlack.l(curPlots)) > 0),
      loop(curPlots $ v_170PlotSlack.l(curPlots),
        put$(v_170PlotSlack.l(curPlots) > 0) '"Konnte 170kg org. N-Dünger-Regel für ', curPlots.tl, ' nicht einhalten (',  v_170PlotSlack.l(curPlots) ,')."'/;
        curWarning = curWarning + 1;
        put$(curWarning < warningsCount) "," /;
      )
    );
    $$iftheni.constraints defined constraints
      if ((sum((constraints,curCrops,curCrops1), v_devUserShares.l(constraints,curCrops,curCrops1)) > 0),
        loop((constraints,curCrops,curCrops1) $ v_devUserShares.l(constraints,curCrops,curCrops1),
          put$(v_devUserShares.l(constraints,curCrops,curCrops1) > 0) '"Konnte Restriktion für ', constraints.tl, ' nicht einhalten."'/;
          curWarning = curWarning + 1;
          put$(curWarning < warningsCount) "," /;
        ) 
      ); 
    $$endif.constraints
    $$iftheni.labour defined p_availLabour
      if ((sum(months, v_devLabour.l(months)) > 0),
        loop((months,fullMonths) $ ( v_devLabour.l(months) $ (months.pos eq fullMonths.pos)),
          put$(v_devLabour.l(months) > 0) '"Konnte maximale Arbeitszeit für ', fullMonths.tl, ' nicht einhalten."'/;
          curWarning = curWarning + 1;
          put$(curWarning < warningsCount) "," /;
        )
      );
    $$endif.labour

    put '],' /; 
* write recommendations from optimisation to JSON file
    put '"recommendation":', "{"/;
    loop((curPlots),
      loop(curCrops,
        loop (manAmounts,
         loop (solidAmounts,
           loop (catchCrop,
            loop (autumnFert,
              put$(v_binCropPlot.l(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert) > 0) 
                '"', curPlots.tl, '": {', 
                '"crop": "', curCrops.tl, '",', 
                '"manAmount": ', manAmounts.tl, ',',
                '"solidAmount": ', solidAmounts.tl, ',',
                '"catchCrop":', catchCrop.tl, ',',
                '"autumnFert":', autumnFert.tl, 
                '}' /
            );
           );
         );
        );
      );
      put$(curPlots.pos < card(curPlots)) "," /
    );
    put "}," /;
    put '"storage": {' /;
      put '"manure": [' /;
        loop (months,
         put v_curStorage.l("manure",months) /; 
         put$(months.pos < card(months)) "," /;
        );
      put '],' /;
      put '"solid": [' /;
        loop (months,
         put v_curStorage.l("solid",months) /; 
         put$(months.pos < card(months)) "," /;
        );
      put ']' /;
    put "}," /;
    put '"exports": {' /;
    put '"manure": [' /;
      loop (months,
       put v_manExports.l("manure",months) /; 
       put$(months.pos < card(months)) "," /;
      );
    put '],' /;
    put '"solid": [' /;
      loop (months,
       put v_manExports.l("solid",months) /; 
       put$(months.pos < card(months)) "," /;
      );
    put ']' /;
    put "}" /;
);
put "}" /;
putclose;
