module.exports = "*-------------------------------\n* Fruchtfolge\n*\n* A spatial crop rotation model\n* serving as a base for the\n* Fruchtfolge web application\n* (c) Christoph Pahmeyer, 2019\n*-------------------------------\n*\n*  --- initiate global parameters for Greening evaluation\n*\nscalar  p_totLand;\nscalar  p_totArabLand;\nscalar  p_totGreenLand;\np_totLand = sum(curPlots, p_plotData(curPlots,\"size\"));\np_totArabLand = sum(curPlots $ (not plots_permPast(curPlots)), p_plotData(curPlots,\"size\"));\np_totGreenLand = p_totLand - p_totArabLand;\nalias (cropGroup,cropGroup1);\nalias (curCrops,curCrops1);\n*\n*  --- add empty crop for constraints\n*\n$onmulti \nset crops / \"\" /;\nset curCrops(crops) / \"\" /;\n$offmulti\n*\n*  --- declare objective variable and equation\n*\nVariable v_obje;\nBinary Variable v_binCropPlot(crops,plots);\nEquations\n  e_obje\n;\n*\n*  --- include model\n*\nEquations\r\n  e_maxShares(curCrops)\r\n  e_oneCropPlot(curPlots)\r\n$iftheni.constraints defined constraints\r\n  e_minimumShares(constraints,curCrops,curCrops1)\r\n  e_maximumShares(constraints,curCrops,curCrops1) \r\n$endif.constraints\r\n;\r\n\r\n*\r\n*  --- each crop cannot exceed the maximum allowed share specified by the users\r\n*      crop rotational settings\r\n*\r\ne_maxShares(curCrops) $ p_cropData(curCrops,\"maxShare\")..\r\n  sum(curPlots, \r\n    v_binCropPlot(curCrops,curPlots)\r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= p_totArabLand * p_cropData(curCrops,\"maxShare\") / 100\r\n;\r\n\r\n*\r\n*  --- ensure that only one crop is grown on a plot\r\n*\r\ne_oneCropPlot(curPlots)..\r\n  sum(curCrops, v_binCropPlot(curCrops,curPlots))\r\n  =E= 1\r\n;\r\n\r\n*\r\n*  --- prohibit growing a crop on a plot when there is no gross margin present\r\n*\r\nv_binCropPlot.up(curCrops,curPlots) $ (not p_grossMarginData(curPlots,curCrops)) = 0;\r\n*\r\n*  --- root crops can obly be grown on root crop capable plots\r\n*\r\nv_binCropPlot.up(curCrops,curPlots) \r\n  $ (crops_rootCrop(curCrops) \r\n  $ (not plots_rootCropCap(curPlots))) = 0;\r\n  \r\n*\r\n*  --- Enter user specified constraints into the model, \r\n*\r\n$iftheni.constraints defined constraints\r\ne_minimumShares(constraints,curCrops,curCrops1) \r\n       $ (p_constraint(constraints,curCrops,curCrops1) \r\n       $ (not (constraints_lt(constraints,'lt'))))..\r\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \r\n    v_binCropPlot(curCrops1,curPlots) + p_plotData(curPlots,'size'))\r\n    =G= p_constraint(constraints,curCrops,curCrops1) \r\n;  \r\n\r\ne_maximumShares(constraints,curCrops,curCrops1) \r\n       $ (p_constraint(constraints,curCrops,curCrops1) \r\n       $ (constraints_lt(constraints,'lt')))..\r\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \r\n    v_binCropPlot(curCrops1,curPlots) + p_plotData(curPlots,'size'))\r\n    =L= p_constraint(constraints,curCrops,curCrops1) \r\n;  \r\n$endif.constraints\r\nEquations\r\n  e_efa\r\n  e_75diversification(cropGroup)\r\n  e_95diversification(cropGroup,cropGroup1)\r\n;\r\n\r\n* Only activate ecological focus area equation if arable land is greater than 15ha\r\ne_efa $ (p_totArabLand >= 15)..\r\n  sum((curPlots,curCrops), \r\n      v_binCropPlot(curCrops,curPlots) \r\n      * p_plotData(curPlots,\"size\") \r\n      * p_cropData(curCrops,\"efaFactor\")\r\n  )\r\n  =G= p_totArabLand * 0.05 \r\n;\r\n\r\n          \r\n* Only activate 75% diversifaction rule if arable land is greater than 10ha\r\ne_75diversification(cropGroup) $ (p_totArabLand >= 10)..\r\n  sum((curPlots,curCrops) $ crops_cropGroup(curCrops,cropGroup), \r\n      v_binCropPlot(curCrops,curPlots) \r\n      * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= p_totArabLand * 0.75\r\n;\r\n\r\n* Only activate 95% diversifaction rule if arable land is greater than 30ha\r\ne_95diversification(cropGroup,cropGroup1) \r\n  $ ((p_totArabLand >= 30)\r\n  $ (not sameas(cropGroup,cropGroup1)))..\r\n  sum((curPlots,curCrops) $ crops_cropGroup(curCrops,cropGroup), \r\n    v_binCropPlot(curCrops,curPlots) \r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  + \r\n  sum((curPlots,curCrops) $ crops_cropGroup(curCrops,cropGroup1), \r\n    v_binCropPlot(curCrops,curPlots) \r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= p_totArabLand * 0.95\r\n;\r\n*\n*  --- calculate overall gross margin for the planning year\n*\ne_obje..\n  v_obje =E=\n    sum((curPlots,curCrops),\n    v_binCropPlot(curCrops,curPlots)\n    * p_grossMarginData(curPlots,curCrops));\noption optCR=0;\nmodel Fruchtfolge / all /;\nsolve Fruchtfolge using MIP maximizing v_obje;\nFile results / %random% /;\r\nresults.lw = 40;\r\nput results;\r\nput \"{\"\r\nput '\"model_status\":',  Fruchtfolge.modelstat, \",\" /;\r\nput '\"solver_status\":', Fruchtfolge.solvestat, \",\" /;\r\nput '\"objective\":', v_obje.l, \",\" /;\r\nput '\"recommendation\":', \"{\"/;\r\nloop((plots),\r\n  loop(crops,\r\n    put$(v_binCropPlot.l(crops,plots) > 0) '\"', plots.tl, '\":', '\"', crops.tl, '\"' /\r\n  )\r\n  put$(ord(plots) < card(plots)) \",\" /\r\n);\r\nput \"}\" /;\r\nput \"}\" /;\r\nputclose;\r\n"