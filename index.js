module.exports = "*-------------------------------\n* Fruchtfolge\n*\n* A spatial crop rotation model\n* serving as a base for the\n* Fruchtfolge web application\n* (c) Christoph Pahmeyer, 2019\n*-------------------------------\n*\n*  --- initiate global parameters for Greening evaluation\n*\nscalar  p_totLand;\nscalar  p_totArabLand;\nscalar  p_totGreenLand;\np_totLand = sum(curPlots, p_plotData(curPlots,\"size\"));\np_totArabLand = sum(curPlots $ (not plots_permPast(curPlots)), p_plotData(curPlots,\"size\"));\np_totGreenLand = p_totLand - p_totArabLand;\nParameter p_priceManExport(months) /\n  jan  15\n  feb  15\n  mrz  15\n  apr  15\n  mai  300\n  jun  300\n  jul  300\n  aug  300\n  sep  300\n  okt  300\n  nov  300\n  dez  300\n/;\nalias (cropGroup,cropGroup1);\nalias (curCrops,curCrops1);\nscalar M / 99999 /;\n*\n*  --- declare objective variable and equation\n*\nVariables\n  v_obje\n  v_totGM\n;\nPositive Variables\n  v_devShares(curCrops)\n  v_devEfa5\n  v_devEfa75\n  v_devEfa95\n$iftheni.constraints defined constraints\n  v_devUserShares(constraints,curCrops,curCrops)\n$endif.constraints\n  v_devOneCrop(curPlots)\n$iftheni.labour defined p_availLabour\n  v_devLabour(months)\n$endif.labour\n;\nBinary Variables\n  v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n;\nEquations\n  e_obje\n  e_totGM\n;\n*\n*  --- include model\n*\nEquations\n  e_maxShares(curCrops)\n  e_oneCropPlot(curPlots)\n$iftheni.constraints defined constraints\n  e_minimumShares(constraints,curCrops,curCrops1)\n  e_maximumShares(constraints,curCrops,curCrops1) \n$endif.constraints\n;\n\n*\n*  --- each crop cannot exceed the maximum allowed share specified by the users\n*      crop rotational settings\n*\ne_maxShares(curCrops) $ p_cropData(curCrops,\"maxShare\")..\n  sum((curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa') , \n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    * p_plotData(curPlots,\"size\")\n  )\n  =L= \n    (p_totArabLand * p_cropData(curCrops,\"maxShare\") / 100)\n    + v_devShares(curCrops)\n;\n\n*\n*  --- ensure that only one crop is grown on a plot\n*\ne_oneCropPlot(curPlots)..\n  sum((curCrops,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'), \n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert))\n  + v_devOneCrop(curPlots)\n  =E= 1\n;\n\n*\n*  --- prohibit growing a crop on a plot when there is no gross margin present\n*\nv_binCropPlot.up(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert) $ ((not\n  p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,\"grossMarginHa\"))\n  $ (not plots_permPast(curPlots))) = 0;\n  \n*\n*  --- Enter user specified constraints into the model, \n*\n$iftheni.constraints defined constraints\ne_minimumShares(constraints,curCrops,curCrops1) \n       $ (p_constraint(constraints,curCrops,curCrops1) \n       $ (not (constraints_lt(constraints,'lt'))))..\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \n    v_binCropPlot(curCrops1,curPlots) * p_plotData(curPlots,'size'))\n    + v_devUserShares(constraints,curCrops,curCrops1)\n    =G= p_constraint(constraints,curCrops,curCrops1) \n;  \n\ne_maximumShares(constraints,curCrops,curCrops1) \n       $ (p_constraint(constraints,curCrops,curCrops1) \n       $ (constraints_lt(constraints,'lt')))..\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \n    v_binCropPlot(curCrops1,curPlots) * p_plotData(curPlots,'size'))\n    =L= \n    p_constraint(constraints,curCrops,curCrops1)\n    + v_devUserShares(constraints,curCrops,curCrops1)\n;  \n$endif.constraints\n\nset manType / manure,solid /;\nparameter p_excr(manType,man_attr);\np_excr(\"manure\",man_attr) = p_manure(man_attr);\np_excr(\"solid\",man_attr) = p_solid(man_attr);\n\npositive variables\n  v_manExports(manType,months)\n;\nEquations\n  e_man_balance\n  e_170_avg(manType)\n  $$ifi \"%duev2020%\"==\"true\" e_170_plots(manType,curPlots)\n;\n\n\nParameter p_manValue(manType,manAmounts,solidAmounts) /\n  'manure'.'0'.set.solidAmounts 0\n  'manure'.'10'.set.solidAmounts 10\n  'manure'.'15'.set.solidAmounts 15\n  'manure'.'20'.set.solidAmounts 20\n  'manure'.'25'.set.solidAmounts 25\n  'manure'.'30'.set.solidAmounts 30\n  'manure'.'40'.set.solidAmounts 40\n  'manure'.'50'.set.solidAmounts 50\n  'manure'.'60'.set.solidAmounts 60\n  'solid'.set.manAmounts.'0' 0\n  'solid'.set.manAmounts.'10' 10\n  'solid'.set.manAmounts.'15' 15\n  'solid'.set.manAmounts.'20' 20\n  'solid'.set.manAmounts.'25' 25\n  'solid'.set.manAmounts.'30' 30\n/;\n\n\ne_man_balance(manType)..\n  sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'),\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    * p_plotData(curPlots,\"size\")\n    * p_manValue(manType,manAmounts,solidAmounts))\n    + sum(months, v_manExports(manType,months))\n    =E= p_excr(manType,\"amount\")\n;\n\n$iftheni.duev2020 \"%duev2020%\"==\"true\"\n  parameter p_notEndangeredLand;\n  p_notEndangeredLand = sum((curPlots) \n    $ (not plots_duevEndangered(curPlots)), p_plotData(curPlots,\"size\"));\n    \n  e_170_avg(manType)..\n    sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert) \n      $ ((not plots_duevEndangered(curPlots))\n      $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')), \n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n     * p_plotData(curPlots,\"size\")\n     * p_manValue(manType,manAmounts,solidAmounts)\n     * p_manure(\"n\")\n     * 80 / 100\n     ) /p_notEndangeredLand =L= 170\n ;\n e_170_plots(manType,curPlots) $ (plots_duevEndangered(curPlots) )..\n  sum((curCrops,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'),\n   v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    * p_manValue(manType,manAmounts,solidAmounts)\n    * p_manure(\"n\")\n    * 80 / 100\n    )  =L= 170\n  ;\n$else.duev2020\n  e_170_avg(manType)..\n    sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'), \n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n     * p_plotData(curPlots,\"size\")\n     * p_manValue(manType,manAmounts,solidAmounts)\n     * p_manure(\"n\")\n     * 80 / 100\n     )/p_totLand =L= 170\n$endif.duev2020\n*\n*  --- Storage model\n*\nPositive Variables \n  v_curStorage(manType,months)\n  v_manureSpring(manType,months)\n  v_manureAutumn\n;\nEquations \n  e_storageBal(manType,months)\n  e_manureSpring(manType)\n  e_manureAutumn\n  e_maxStorageCap(manType,months)\n;\nParameter p_monthlyManure(manType);\n\n* We assume a steady flow of manure into the storages\np_monthlyManure(\"manure\") = p_manure(\"amount\") / 12;\np_monthlyManure(\"solid\") = p_solid(\"amount\") / 12;\n\n* We also assume, that the maximum storage capacity is equal to the monthly\n* flow multiplied with the 6 month minimum storage capacity requried by the Fert. Ordinance\nParameter p_maxStoreCap(manType);\np_maxStoreCap(\"manure\") =  p_manure(\"amount\") / 12 * 6;\np_maxStoreCap(\"solid\") =  p_solid(\"amount\") / 12 * 2;\n\nParameter p_springManMonths(manType,months) /\n  manure.feb 0.667\n  manure.mrz 0.167\n  manure.apr 0.167\n  solid.feb  0.333\n  solid.mrz  0.333\n  solid.apr  0.333\n/;\n\n\n*\n*  --- We model 3 timepoints:\n*      1. The amount of manure in storage at 31.01\n*      2. The amount of manure in storage after spring\n*      3. The amount of manure in storage after 01.10\n*     \ne_manureSpring(manType)..\n  sum(months, v_manureSpring(manType,months)) =E=\n  sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'),\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    * p_plotData(curPlots,\"size\")\n    * p_manValue(manType,manAmounts,solidAmounts)\n  )\n;\n\n* Manure spreading can only be done in these months\nset manMonths / feb, mrz, apr, mai /;\nv_manureSpring.up(manType,months) = 0;\nv_manureSpring.up(manType,months) \n  $ sum(manMonths $ (sameas(manMonths,months)),1) = +inf;\n\ne_manureAutumn..\n  v_manureAutumn =E=\n  sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'autumnFertm3'),\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    * p_plotData(curPlots,\"size\")\n    * p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'autumnFertm3')\n  )\n;\n\ne_storageBal(manType,months)..\n  v_curStorage(manType,months) =E=\n* The storage level of the previous month  \n    v_curStorage(manType,months - 1)\n* The monthly in-flow  \n    + p_monthlyManure(manType) $ (not sameas(months,\"jan\"))\n* We assume that the storage is at capacity at the 31.01\n    + p_maxStoreCap(manType)   $ sameas(months,\"jan\") \n* In these months manure is assumed to be spreaded\n    - v_manureSpring(manType,months)\n* Exports can be done in April (cheaper) or September\n    - v_manExports(manType,months) $ (sameas(months,\"apr\") or sameas(months,\"sep\"))\n* Autumn manure spreading is only assumed to be done in September\n    - v_manureAutumn $ (sameas(months,\"sep\") $ sameas(manType,\"manure\"))\n;\n\ne_maxStorageCap(manType,months)..\n  v_curStorage(manType,months) =L=\n* at the 01.10, the storage needs to have at least a capacity of 4 months left  \n  p_maxStoreCap(manType) \n  - (3 * p_monthlyManure(manType)) $ sameas(months,\"okt\")\n;\n\nEquations\n  e_efa\n  e_75diversification(cropGroup)\n  e_95diversification(cropGroup,cropGroup1)\n;\n\n* Only activate ecological focus area equation if arable land is greater than 15ha\ne_efa $ (p_totArabLand >= 15)..\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'efaFactor'),\n      v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n      * p_plotData(curPlots,\"size\")\n      * p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'efaFactor')\n  )\n  + v_devEfa5\n  =G= \n  p_totArabLand * 0.05\n;\n\n\n* Only activate 75% diversifaction rule if arable land is greater than 10ha\ne_75diversification(cropGroup) $ (p_totArabLand >= 10)..\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \n    $ (crops_cropGroup(curCrops,cropGroup)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')),\n      v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n      * p_plotData(curPlots,\"size\")\n  )\n  =L= \n  p_totArabLand * 0.75\n  + v_devEfa75\n  \n;\n\n* Only activate 95% diversifaction rule if arable land is greater than 30ha\ne_95diversification(cropGroup,cropGroup1)\n  $ ((p_totArabLand >= 30)\n  $ (not sameas(cropGroup,cropGroup1)))..\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \n    $ (crops_cropGroup(curCrops,cropGroup)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')),\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    * p_plotData(curPlots,\"size\")\n  )\n  +\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \n    $ (crops_cropGroup(curCrops,cropGroup1)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')),\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n    * p_plotData(curPlots,\"size\")\n  )\n  =L= \n  p_totArabLand * 0.95\n  + v_devEfa95\n;\n\n*\n*  --- Only account for labour constraints when parameter is defined\n*\n$iftheni.labour defined p_availLabour\nEquations\n  e_maxLabour(months)\n*  e_maxFieldWorkDays(months)\n;\n\ne_maxLabour(months)..\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert)\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,months),\n  v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n  * p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,months)\n  )\n  =L= \n  p_availLabour(months)\n  + v_devLabour(months)\n;\n\n*\n*  --- we assume a maximum of 14h of work per day\n*\n$ontext\ne_maxFieldWorkDays(months)..\n  sum((curPlots,curCrops,halfMonths) $ months_halfMonths(months,halfMonths),\n  v_binCropPlot(curCrops,curPlots)\n  * p_tractorReq(crops,halfMonths)\n  =L= p_availFieldWorkDays(months) * p_availTractHours(month)\n;\n$offtext\n\n$endif.labour\n\n*\n*  --- calculate overall gross margin for the planning year\n*\ne_totGM..\n  v_totGM =E=\n    sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n      $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'), \n      v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n      * p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')\n      * p_plotData(curPlots,'size')\n    )\n    - sum((manType,months), v_manExports(manType,months) * p_priceManExport(months));\ne_obje..\n  v_obje =E=\n    v_totGM\n    - sum(curCrops, v_devShares(curCrops) * M)\n    - (v_devEfa5 * M)\n    - (v_devEfa75 * M)\n    - (v_devEfa95 * M)\n    - sum(curPlots, v_devOneCrop(curPlots) * M * 10)\n$iftheni.constraints defined constraints\n    - sum((constraints,curCrops,curCrops1),\n      v_devUserShares(constraints,curCrops,curCrops1) * M)\n$endif.constraints\n$iftheni.labour defined p_availLabour\n    - sum(months, v_devLabour(months) * 1000)\n$endif.labour\n;\n*\n*  --- define upper bounds for slack variables\n*\nv_devShares.up(curCrops) = p_totArabLand;\nv_devEfa5.up = p_totArabLand * 0.05;\nv_devEfa75.up = p_totArabLand * 0.25;\nv_devEfa95.up = p_totArabLand;\nv_devOneCrop.up(curPlots) = 1;\n$iftheni.constraints defined constraints\n  v_devUserShares.up(constraints,curCrops,curCrops1) = p_totArabLand;\n$endif.constraints\n$iftheni.labour defined p_availLabour\n  v_devLabour.up(months) = 15000;\n$endif.labour\noption optCR=0.02;\nmodel Fruchtfolge /\n  e_obje\n  e_totGM\n  e_maxShares\n  e_oneCropPlot\n*  e_man_balance\n  e_170_avg\n  $$ifi \"%duev2020%\"==\"true\" e_170_plots\n  e_storageBal\n  e_manureSpring\n  e_manureAutumn\n  e_maxStorageCap\n$iftheni.constraints defined constraints\n  e_minimumShares\n  e_maximumShares\n$endif.constraints\n  e_efa\n  e_75diversification\n  e_95diversification\n$iftheni.labour defined p_availLabour\n  e_maxLabour\n$endif.labour\n/;\nsolve Fruchtfolge using MIP maximizing v_obje;\nset fullMonths /\n  'Januar'\n  'Februar'\n  'März'\n  'April'\n  'Mai'\n  'Juni'\n  'Juli'\n  'August'\n  'September'\n  'Oktober'\n  'November'\n  'Dezember'\n/;\nset bool / true, false /;\nset toBool(*,bool) /\n  catchCrop.true  YES\n  noCatchCrop.false YES\n  autumnFert.true YES\n  noAutumnFert.false YES\n/;\n\nscalar \n  warningsCount\n  curWarning\n;\nwarningsCount = sum(curCrops $ v_devShares.l(curCrops), 1)\n                 + 1 $ v_devEfa5.l \n                 + 1 $ v_devEfa75.l \n                 + 1 $ v_devEfa95.l\n                 + sum(curPlots $ v_devOneCrop.l(curPlots), 1)\n                 $$iftheni.constraints defined constraints\n                   + sum((constraints,curCrops,curCrops1) $ v_devUserShares.l(constraints,curCrops,curCrops1), 1)\n                 $$endif.constraints\n                 $$iftheni.labour defined p_availLabour\n                   + sum(months $ v_devLabour.l(months), 1)\n                 $$endif.labour\n;\ncurWarning = 0;\n\ndisplay warningsCount,curWarning;\nFile results / \"%random%\" /;\nresults.lw = 0;\nput results;\nput \"{\"\nput '\"model_status\":',  Fruchtfolge.modelstat, \",\" /;\nput '\"solver_status\":', Fruchtfolge.solvestat, \",\" /;\n\nif ( ((Fruchtfolge.modelstat ne 1) and (Fruchtfolge.modelstat ne 8)),\n    put '\"error_message\": \"Infeasible model.\"' /;\n  ELSE\n    put '\"objective\":', v_totGM.l, \",\" /;\n* add warnings if slack variables have non 0 levels\n    put '\"warnings\": [' /;\n\n    if ((sum(curCrops, v_devShares.l(curCrops)) > 0),\n      loop(curCrops $ v_devShares.l(curCrops),\n        put$(v_devShares.l(curCrops) > 0) '\"Maximaler Fruchtfolgeanteil von ', curCrops.tl, ' konnte nicht eingehalten werden.\"'/;\n        curWarning = curWarning + 1;\n        put$(curWarning < warningsCount) \",\" /;\n      )\n    );\n    if ((v_devEfa5.l > 0),\n      put '\"Konnte 5% ÖVF nicht einhalten. Prüfen, ob Sommerungen vorhanden sind, bzw. ob ZF Anbau erlaubt wurde.\"' /;\n      curWarning = curWarning + 1;\n      put$(curWarning < warningsCount) \",\" /;\n    );\n    if ((v_devEfa75.l > 0),\n      put '\"Konnte 75% Greening-Regel nicht einhalten\"' /;\n      curWarning = curWarning + 1;\n      put$(curWarning < warningsCount) \",\" /;\n    );\n    if ((v_devEfa95.l > 0),\n      put '\"Konnte 95% Greening-Regel nicht einhalten\"' /;\n      curWarning = curWarning + 1;\n      put$(curWarning < warningsCount) \",\" /;\n    );\n    if ((sum(curPlots, v_devOneCrop.l(curPlots)) > 0),\n      loop(curPlots $ v_devOneCrop.l(curPlots),\n        put$(v_devOneCrop.l(curPlots) > 0) '\"Keine mögliche Nachfrucht für ', curPlots.tl, ' mit den aktuellen Anbaupause/Nachfruchtwirkungen.\"'/;\n        curWarning = curWarning + 1;\n        put$(curWarning < warningsCount) \",\" /;\n      )\n    );\n    $$iftheni.constraints defined constraints\n      if ((sum((constraints,curCrops,curCrops1), v_devUserShares.l(constraints,curCrops,curCrops1)) > 0),\n        loop((constraints,curCrops,curCrops1) $ v_devUserShares.l(constraints,curCrops,curCrops1),\n          put$(v_devUserShares.l(constraints,curCrops,curCrops1) > 0) '\"Konnte Restriktion für ', constraints.tl, ' nicht einhalten.\"'/;\n          curWarning = curWarning + 1;\n          put$(curWarning < warningsCount) \",\" /;\n        ) \n      ); \n    $$endif.constraints\n    $$iftheni.labour defined p_availLabour\n      if ((sum(months, v_devLabour.l(months)) > 0),\n        loop((months,fullMonths) $ ( v_devLabour.l(months) $ (months.pos eq fullMonths.pos)),\n          put$(v_devLabour.l(months) > 0) '\"Konnte maximale Arbeitszeit für ', fullMonths.tl, ' nicht einhalten.\"'/;\n          curWarning = curWarning + 1;\n          put$(curWarning < warningsCount) \",\" /;\n        )\n      );\n    $$endif.labour\n\n    put '],' /; \n* write recommendations from optimisation to JSON file\n    put '\"recommendation\":', \"{\"/;\n    loop((curPlots),\n      loop(curCrops,\n        loop (manAmounts,\n         loop (solidAmounts,\n           loop (catchCrop,\n            loop (autumnFert,\n              put$(v_binCropPlot.l(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert) > 0) \n                '\"', curPlots.tl, '\": {', \n                '\"crop\": \"', curCrops.tl, '\",', \n                '\"manAmount\": ', manAmounts.tl, ',',\n                '\"solidAmount\": ', solidAmounts.tl, ',',\n                '\"catchCrop\":', catchCrop.tl, ',',\n                '\"autumnFert\":', autumnFert.tl, \n                '}' /\n            );\n           );\n         );\n        );\n      );\n      put$(curPlots.pos < card(curPlots)) \",\" /\n    );\n    put \"}\" /;\n);\nput \"}\" /;\nputclose;\n\n"