module.exports = "*-------------------------------\n* Fruchtfolge\n*\n* A spatial crop rotation model\n* serving as a base for the\n* Fruchtfolge web application\n* (c) Christoph Pahmeyer, 2019\n*-------------------------------\n*\n*  --- initiate global parameters for Greening evaluation\n*\nscalar  p_totLand;\nscalar  p_totArabLand;\nscalar  p_totGreenLand;\np_totLand = sum(curPlots, p_plotData(curPlots,\"size\"));\np_totArabLand = sum(curPlots $ (not plots_permPast(curPlots)), p_plotData(curPlots,\"size\"));\np_totGreenLand = p_totLand - p_totArabLand;\nalias (cropGroup,cropGroup1);\nalias (curCrops,curCrops1);\n*\n*  --- declare objective variable and equation\n*\nVariable v_obje;\nBinary Variables\n  v_binCropPlot(curCrops,curPlots)\n  v_binCatchCrop(curCrops,curPlots)\n;\nEquations\n  e_obje\n;\n*\n*  --- include model\n*\nEquations\r\n    e_oneCatchCropPlot(curPlots)\r\n    e_catchCropEqBinCrop(curCrops,curPlots)\r\n;\r\n\r\n*\r\n*  --- ensure that only one catch crop is grown on a plot\r\n*\r\ne_oneCatchCropPlot(curPlots)..\r\n  sum(curCrops, v_binCatchCrop(curCrops,curPlots))\r\n  =L= 1\r\n;\r\n\r\n*\r\n*  --- ensure that catch crop option matches actually grown crop\r\n*\r\ne_catchCropEqBinCrop(curCrops,curPlots)..\r\n  v_binCatchCrop(curCrops,curPlots) =L= v_binCropPlot(curCrops,curPlots)\r\n;\r\n*\r\n* --- Only allow growing of catch crops if it is possible to grow the catch\r\n*     crop after the previously grown crop (e.g. not after sugar beets or maize)\r\n*     and if the succeeding crop is a summer harvested crop\r\n*     This way, Greening compatible catch crops should be ensured\r\n*\r\nv_binCatchCrop.up(curCrops,curPlots) = 0;\r\nv_binCatchCrop.up(curCrops,curPlots)\r\n  $ sum((years,curYear)\r\n    $ (sameas(years,curYear)\r\n    $ sum(cropGroup $ (crops_cropGroup(curCrops,cropGroup) $ plots_years_cropGroup(curPlots,years - 1,cropGroup)),1)\r\n    $ crops_summer(curCrops)\r\n    $ crops_catchCrop(curCrops)\r\n    $ (not plots_permPast(curPlots))\r\n    ),1) = 1;\r\n\r\n\r\n*\r\n* --- Calculate costs of growing a catch crop on a plot\r\n*     Source: Own regression made from KTBL - Leistungs- Kostenrechner data\r\n*             Based on crop \"Zwischenfrucht Senf\"\r\n*\r\nParameter p_costCatchCrop(curPlots);\r\np_costCatchCrop(curPlots) =\r\n    0.2850553506 * p_plotData(curPlots,'distance')\r\n  - 0.6666666667 * p_plotData(curPlots,'size')\r\n  + 113\r\n;\r\n\r\ndisplay p_costCatchCrop;\r\n*\r\n*  --- Source: Own regression made from KTBL - Verfahrensrechner Pflanze data\r\n*              Based on crop \"Zwischenfrucht Senf\"\r\n*\r\nset catchCropMonths(halfMonths) /'AUG2','SEP1','SEP2','FEB2'/;\r\nParameter p_timeReqCatchCrop(curPlots,halfMonths);\r\n\r\np_timeReqCatchCrop(curPlots,catchCropMonths)\r\n  = (0.04827586207 * p_plotData(curPlots,'distance')\r\n  - 0.1 * p_plotData(curPlots,'size')\r\n  + 4.191724138)\r\n  / card(catchCropMonths)\r\n;\r\nEquations\r\n  e_maxShares(curCrops)\r\n  e_oneCropPlot(curPlots)\r\n$iftheni.constraints defined constraints\r\n  e_minimumShares(constraints,curCrops,curCrops1)\r\n  e_maximumShares(constraints,curCrops,curCrops1) \r\n$endif.constraints\r\n;\r\n\r\n*\r\n*  --- each crop cannot exceed the maximum allowed share specified by the users\r\n*      crop rotational settings\r\n*\r\ne_maxShares(curCrops) $ p_cropData(curCrops,\"maxShare\")..\r\n  sum(curPlots, \r\n    v_binCropPlot(curCrops,curPlots)\r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= p_totArabLand * p_cropData(curCrops,\"maxShare\") / 100\r\n;\r\n\r\n*\r\n*  --- ensure that only one crop is grown on a plot\r\n*\r\ne_oneCropPlot(curPlots)..\r\n  sum(curCrops, v_binCropPlot(curCrops,curPlots))\r\n  =E= 1\r\n;\r\n\r\n*\r\n*  --- prohibit growing a crop on a plot when there is no gross margin present\r\n*\r\nv_binCropPlot.up(curCrops,curPlots) $ (not p_grossMarginData(curPlots,curCrops)) = 0;\r\n\r\n*\r\n*  --- root crops can obly be grown on root crop capable plots\r\n*\r\nv_binCropPlot.up(curCrops,curPlots) \r\n  $ (crops_rootCrop(curCrops) \r\n  $ (not plots_rootCropCap(curPlots))) = 0;\r\n\r\n*\r\n*  --- when a cropping factor of 0 is given for a previous crop - crop combination\r\n*      the crop can't be grown\r\n*  \r\nv_binCropPlot.up(curCrops,curPlots)\r\n  $ sum((years,curYear,curCrops1) \r\n  $ ((not sameas(curCrops1,'')) \r\n  $ sameas(years,curYear)\r\n  $ sum((cropGroup) $ (crops_cropGroup(curCrops,cropGroup) \r\n    $ plots_years_cropGroup(curPlots,years - 1,cropGroup)), 1)\r\n  $ (not p_croppingFactor(curCrops1,curCrops))),1) = 0;\r\n\r\n*\r\n*  --- when a plot is permanent pasture, it has to be used in the same way as in the previous year\r\n*\r\nv_binCropPlot.lo(curCrops,curPlots)\r\n  $ (plots_permPast(curPlots)\r\n  $ sum((years,curYear) \r\n     $ (sameas(years,curYear) \r\n     $ sum((cropGroup) \r\n      $ (crops_cropGroup(curCrops,cropGroup) \r\n      $ plots_years_cropGroup(curPlots,years - 1,cropGroup)),\r\n      1)),\r\n    1)) \r\n  = 1;\r\n*\r\n*  --- allow permanent pasture crops only on permanent pastures\r\n*  \r\nv_binCropPlot.up(curCrops,curPlots)\r\n  $ ((not plots_permPast(curPlots))\r\n  $ (sum(permPastCrops $ sameas(curCrops,permPastCrops),1)))\r\n  = 0;\r\n*\r\n*  --- Enter user specified constraints into the model, \r\n*\r\n$iftheni.constraints defined constraints\r\ne_minimumShares(constraints,curCrops,curCrops1) \r\n       $ (p_constraint(constraints,curCrops,curCrops1) \r\n       $ (not (constraints_lt(constraints,'lt'))))..\r\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \r\n    v_binCropPlot(curCrops1,curPlots) * p_plotData(curPlots,'size'))\r\n    =G= p_constraint(constraints,curCrops,curCrops1) \r\n;  \r\n\r\ne_maximumShares(constraints,curCrops,curCrops1) \r\n       $ (p_constraint(constraints,curCrops,curCrops1) \r\n       $ (constraints_lt(constraints,'lt')))..\r\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \r\n    v_binCropPlot(curCrops1,curPlots) * p_plotData(curPlots,'size'))\r\n    =L= p_constraint(constraints,curCrops,curCrops1) \r\n;  \r\n$endif.constraints\r\nEquations\r\n  e_efa\r\n  e_75diversification(cropGroup)\r\n  e_95diversification(cropGroup,cropGroup1)\r\n;\r\n\r\n* Only activate ecological focus area equation if arable land is greater than 15ha\r\ne_efa $ (p_totArabLand >= 15)..\r\n  sum((curPlots,curCrops),\r\n      v_binCropPlot(curCrops,curPlots)\r\n      * p_plotData(curPlots,\"size\")\r\n      * p_cropData(curCrops,\"efaFactor\")\r\n      + v_binCatchCrop(curCrops,curPlots)\r\n      * p_plotData(curPlots,\"size\")\r\n  )\r\n  =G= p_totArabLand * 0.05\r\n;\r\n\r\n\r\n* Only activate 75% diversifaction rule if arable land is greater than 10ha\r\ne_75diversification(cropGroup) $ (p_totArabLand >= 10)..\r\n  sum((curPlots,curCrops) $ crops_cropGroup(curCrops,cropGroup),\r\n      v_binCropPlot(curCrops,curPlots)\r\n      * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= p_totArabLand * 0.75\r\n;\r\n\r\n* Only activate 95% diversifaction rule if arable land is greater than 30ha\r\ne_95diversification(cropGroup,cropGroup1)\r\n  $ ((p_totArabLand >= 30)\r\n  $ (not sameas(cropGroup,cropGroup1)))..\r\n  sum((curPlots,curCrops) $ crops_cropGroup(curCrops,cropGroup),\r\n    v_binCropPlot(curCrops,curPlots)\r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  +\r\n  sum((curPlots,curCrops) $ crops_cropGroup(curCrops,cropGroup1),\r\n    v_binCropPlot(curCrops,curPlots)\r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= p_totArabLand * 0.95\r\n;\r\n*\r\n*  --- Only account for labour constraints when parameter is defined\r\n*\r\n$iftheni.labour defined p_availLabour\r\nEquations\r\n  e_maxLabour(months)\r\n*  e_maxFieldWorkDays(months)\r\n;\r\n\r\ne_maxLabour(months)..\r\n  sum((curPlots,curCrops,halfMonths) $ months_halfMonths(months,halfMonths),\r\n  v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size')\r\n  * p_laborReq(curCrops,halfMonths)\r\n  + v_binCatchCrop(curCrops,curPlots) * p_plotData(curPlots,'size')\r\n  * p_timeReqCatchCrop(curPlots,halfMonths)\r\n  )\r\n  =L= p_availLabour(months)\r\n;\r\n\r\n*\r\n*  --- we assume a maximum of 14h of work per day\r\n*\r\n$ontext\r\ne_maxFieldWorkDays(months)..\r\n  sum((curPlots,curCrops,halfMonths) $ months_halfMonths(months,halfMonths),\r\n  v_binCropPlot(curCrops,curPlots)\r\n  * p_tractorReq(crops,halfMonths)\r\n  =L= p_availFieldWorkDays(months) * p_availTractHours(month)\r\n;\r\n$offtext\r\n\r\n$endif.labour\r\n*\n*  --- calculate overall gross margin for the planning year\n*\ne_obje..\n  v_obje =E=\n    sum((curPlots,curCrops),\n    v_binCropPlot(curCrops,curPlots)\n    * p_grossMarginData(curPlots,curCrops)\n    - v_binCatchCrop(curCrops,curPlots)\n    * p_plotData(curPlots,'size')\n    * p_costCatchCrop(curPlots));\noption optCR=0;\nmodel Fruchtfolge / all /;\nFruchtfolge.limrow = 10000;\nFruchtfolge.limcol = 10000;\nsolve Fruchtfolge using MIP maximizing v_obje;\nFile results / \"%random%\" /;\r\nresults.lw = 40;\r\nput results;\r\nput \"{\"\r\nput '\"model_status\":',  Fruchtfolge.modelstat, \",\" /;\r\nput '\"solver_status\":', Fruchtfolge.solvestat, \",\" /;\r\n\r\nif ( (Fruchtfolge.modelstat ne 1),\r\n    put '\"error_message\": \"Infeasible model.\"' /;\r\n  ELSE\r\n    put '\"objective\":', v_obje.l, \",\" /;\r\n* write recommendations from optimisation to JSON file\r\n    put '\"recommendation\":', \"{\"/;\r\n    loop((curPlots),\r\n      loop(curCrops,\r\n        put$(v_binCropPlot.l(curCrops,curPlots) > 0) '\"', curPlots.tl, '\":', '\"', curCrops.tl, '\"' /\r\n      )\r\n      put$(curPlots.pos < card(curPlots)) \",\" /\r\n    );\r\n    put \"},\" /;\r\n* write catch crop recommendations from optimisation to JSON file\r\n    put '\"catchCrop\":', \"{\"/;\r\n    loop((curPlots),\r\n      put$(sum(curCrops, v_binCatchCrop.l(curCrops,curPlots)) > 0) '\"', curPlots.tl, '\":', 'true' /\r\n      put$(sum(curCrops, v_binCatchCrop.l(curCrops,curPlots)) eq 0) '\"', curPlots.tl, '\":', 'false' /\r\n      put$(curPlots.pos < card(curPlots)) \",\" /\r\n    );\r\n    put \"}\" /;\r\n);\r\n\r\nput \"}\" /;\r\nputclose;\r\n"