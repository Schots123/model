module.exports = "*-------------------------------\n* Fruchtfolge\n*\n* A spatial crop rotation model\n* serving as a base for the\n* Fruchtfolge web application\n* (c) Christoph Pahmeyer, 2019\n*-------------------------------\n*\n*  --- initiate global parameters for Greening evaluation\n*\nscalar  p_totLand;\nscalar  p_totArabLand;\nscalar  p_totGreenLand;\np_totLand = sum(curPlots, p_plotData(curPlots,\"size\"));\np_totArabLand = sum(curPlots $ (not plots_permPast(curPlots)), p_plotData(curPlots,\"size\"));\np_totGreenLand = p_totLand - p_totArabLand;\nalias (cropGroup,cropGroup1);\nalias (curCrops,curCrops1);\nscalar M / 99999 /;\n*\n*  --- declare objective variable and equation\n*\nVariables\n  v_obje\n  v_totGM\n;\nPositive Variables\n  v_devShares(curCrops)\n  v_devEfa5\n  v_devEfa75\n  v_devEfa95\n$iftheni.constraints defined constraints\n  v_devUserShares(constraints,curCrops,curCrops)\n$endif.constraints\n  v_devOneCrop(curPlots)\n$iftheni.labour defined p_availLabour\n  v_devLabour(months)\n$endif.labour\n;\nBinary Variables\n  v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n;\nEquations\n  e_obje\n  e_totGM\n;\n*\n*  --- include model\n*\nEquations\r\n  e_maxShares(curCrops)\r\n  e_oneCropPlot(curPlots)\r\n$iftheni.constraints defined constraints\r\n  e_minimumShares(constraints,curCrops,curCrops1)\r\n  e_maximumShares(constraints,curCrops,curCrops1) \r\n$endif.constraints\r\n;\r\n\r\n*\r\n*  --- each crop cannot exceed the maximum allowed share specified by the users\r\n*      crop rotational settings\r\n*\r\ne_maxShares(curCrops) $ p_cropData(curCrops,\"maxShare\")..\r\n  sum((curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa') , \r\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= \r\n    (p_totArabLand * p_cropData(curCrops,\"maxShare\") / 100)\r\n    + v_devShares(curCrops)\r\n;\r\n\r\n*\r\n*  --- ensure that only one crop is grown on a plot\r\n*\r\ne_oneCropPlot(curPlots)..\r\n  sum((curCrops,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'), \r\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert))\r\n  + v_devOneCrop(curPlots)\r\n  =E= 1\r\n;\r\n\r\n*\r\n*  --- prohibit growing a crop on a plot when there is no gross margin present\r\n*\r\nv_binCropPlot.up(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert) $ ((not\r\n  p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,\"grossMarginHa\"))\r\n  $ (not plots_permPast(curPlots))) = 0;\r\n  \r\n*\r\n*  --- Enter user specified constraints into the model, \r\n*\r\n$iftheni.constraints defined constraints\r\ne_minimumShares(constraints,curCrops,curCrops1) \r\n       $ (p_constraint(constraints,curCrops,curCrops1) \r\n       $ (not (constraints_lt(constraints,'lt'))))..\r\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \r\n    v_binCropPlot(curCrops1,curPlots) * p_plotData(curPlots,'size'))\r\n    + v_devUserShares(constraints,curCrops,curCrops1)\r\n    =G= p_constraint(constraints,curCrops,curCrops1) \r\n;  \r\n\r\ne_maximumShares(constraints,curCrops,curCrops1) \r\n       $ (p_constraint(constraints,curCrops,curCrops1) \r\n       $ (constraints_lt(constraints,'lt')))..\r\n  sum(curPlots, v_binCropPlot(curCrops,curPlots) * p_plotData(curPlots,'size') + \r\n    v_binCropPlot(curCrops1,curPlots) * p_plotData(curPlots,'size'))\r\n    =L= \r\n    p_constraint(constraints,curCrops,curCrops1)\r\n    + v_devUserShares(constraints,curCrops,curCrops1)\r\n;  \r\n$endif.constraints\r\n\nset manType / manure,solid /;\r\nparameter p_excr(manType,man_attr);\r\np_excr(\"manure\",man_attr) = p_manure(man_attr);\r\np_excr(\"solid\",man_attr) = p_solid(man_attr);\r\n\r\npositive variables\r\n  v_manExports(manType)\r\n;\r\nEquations\r\n  e_man_balance\r\n  e_170_avg(manType)\r\n  $$ifi \"%duev2020%\"==\"true\" e_170_plots(manType,curPlots)\r\n;\r\n\r\n\r\nParameter p_manValue(manType,manAmounts,solidAmounts) /\r\n  'manure'.'0'.set.solidAmounts 0\r\n  'manure'.'10'.set.solidAmounts 10\r\n  'manure'.'15'.set.solidAmounts 15\r\n  'manure'.'20'.set.solidAmounts 20\r\n  'manure'.'25'.set.solidAmounts 25\r\n  'manure'.'30'.set.solidAmounts 30\r\n  'manure'.'40'.set.solidAmounts 40\r\n  'manure'.'50'.set.solidAmounts 50\r\n  'manure'.'60'.set.solidAmounts 60\r\n  'solid'.set.manAmounts.'0' 0\r\n  'solid'.set.manAmounts.'10' 10\r\n  'solid'.set.manAmounts.'15' 15\r\n  'solid'.set.manAmounts.'20' 20\r\n  'solid'.set.manAmounts.'25' 25\r\n  'solid'.set.manAmounts.'30' 30\r\n/;\r\n\r\n\r\ne_man_balance(manType)..\r\n  sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'),\r\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    * p_plotData(curPlots,\"size\")\r\n    * p_manValue(manType,manAmounts,solidAmounts))\r\n    + v_manExports(manType)\r\n    =E= p_excr(manType,\"amount\")\r\n;\r\n\r\n$iftheni.duev2020 \"%duev2020%\"==\"true\"\r\n  parameter p_notEndangeredLand;\r\n  p_notEndangeredLand = sum((curPlots) \r\n    $ (not plots_duevEndangered(curPlots)), p_plotData(curPlots,\"size\"));\r\n    \r\n  e_170_avg(manType)..\r\n    sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert) \r\n      $ ((not plots_duevEndangered(curPlots))\r\n      $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')), \r\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n     * p_plotData(curPlots,\"size\")\r\n     * p_manValue(manType,manAmounts,solidAmounts)\r\n     * p_manure(\"n\")\r\n     * 80 / 100\r\n     ) /p_notEndangeredLand =L= 170\r\n ;\r\n e_170_plots(manType,curPlots) $ (plots_duevEndangered(curPlots) )..\r\n  sum((curCrops,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'),\r\n   v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    * p_manValue(manType,manAmounts,solidAmounts)\r\n    * p_manure(\"n\")\r\n    * 80 / 100\r\n    )  =L= 170\r\n  ;\r\n$else.duev2020\r\n  e_170_avg(manType)..\r\n    sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'), \r\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n     * p_plotData(curPlots,\"size\")\r\n     * p_manValue(manType,manAmounts,solidAmounts)\r\n     * p_manure(\"n\")\r\n     * 80 / 100\r\n     )/p_totLand =L= 170\r\n$endif.duev2020\nEquations\r\n  e_efa\r\n  e_75diversification(cropGroup)\r\n  e_95diversification(cropGroup,cropGroup1)\r\n;\r\n\r\n* Only activate ecological focus area equation if arable land is greater than 15ha\r\ne_efa $ (p_totArabLand >= 15)..\r\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'efaFactor'),\r\n      v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n      * p_plotData(curPlots,\"size\")\r\n      * p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'efaFactor')\r\n  )\r\n  + v_devEfa5\r\n  =G= \r\n  p_totArabLand * 0.05\r\n;\r\n\r\n\r\n* Only activate 75% diversifaction rule if arable land is greater than 10ha\r\ne_75diversification(cropGroup) $ (p_totArabLand >= 10)..\r\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \r\n    $ (crops_cropGroup(curCrops,cropGroup)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')),\r\n      v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n      * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= \r\n  p_totArabLand * 0.75\r\n  + v_devEfa75\r\n  \r\n;\r\n\r\n* Only activate 95% diversifaction rule if arable land is greater than 30ha\r\ne_95diversification(cropGroup,cropGroup1)\r\n  $ ((p_totArabLand >= 30)\r\n  $ (not sameas(cropGroup,cropGroup1)))..\r\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \r\n    $ (crops_cropGroup(curCrops,cropGroup)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')),\r\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  +\r\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert) \r\n    $ (crops_cropGroup(curCrops,cropGroup1)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')),\r\n    v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    * p_plotData(curPlots,\"size\")\r\n  )\r\n  =L= \r\n  p_totArabLand * 0.95\r\n  + v_devEfa95\r\n;\r\n\n*\r\n*  --- Only account for labour constraints when parameter is defined\r\n*\r\n$iftheni.labour defined p_availLabour\r\nEquations\r\n  e_maxLabour(months)\r\n*  e_maxFieldWorkDays(months)\r\n;\r\n\r\ne_maxLabour(months)..\r\n  sum((curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n    $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,months),\r\n  v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\r\n  * p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,months)\r\n  )\r\n  =L= \r\n  p_availLabour(months)\r\n  + v_devLabour(months)\r\n;\r\n\r\n*\r\n*  --- we assume a maximum of 14h of work per day\r\n*\r\n$ontext\r\ne_maxFieldWorkDays(months)..\r\n  sum((curPlots,curCrops,halfMonths) $ months_halfMonths(months,halfMonths),\r\n  v_binCropPlot(curCrops,curPlots)\r\n  * p_tractorReq(crops,halfMonths)\r\n  =L= p_availFieldWorkDays(months) * p_availTractHours(month)\r\n;\r\n$offtext\r\n\r\n$endif.labour\r\n\n*\n*  --- calculate overall gross margin for the planning year\n*\ne_totGM..\n  v_totGM =E=\n    sum((curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n      $ p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa'), \n      v_binCropPlot(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert)\n      * p_grossMarginData(curPlots,curCrops,manAmounts,solidAmounts,catchCrop,autumnFert,'grossMarginHa')\n      * p_plotData(curPlots,'size')\n    )\n    - sum(manType, v_manExports(manType) * 15);\ne_obje..\n  v_obje =E=\n    v_totGM\n    - sum(curCrops, v_devShares(curCrops) * M)\n    - (v_devEfa5 * M)\n    - (v_devEfa75 * M)\n    - (v_devEfa95 * M)\n    - sum(curPlots, v_devOneCrop(curPlots) * M * 10)\n$iftheni.constraints defined constraints\n    - sum((constraints,curCrops,curCrops1),\n      v_devUserShares(constraints,curCrops,curCrops1) * M)\n$endif.constraints\n$iftheni.labour defined p_availLabour\n    - sum(months, v_devLabour(months) * 1000)\n$endif.labour\n;\n*\n*  --- define upper bounds for slack variables\n*\nv_devShares.up(curCrops) = p_totArabLand;\nv_devEfa5.up = p_totArabLand * 0.05;\nv_devEfa75.up = p_totArabLand * 0.25;\nv_devEfa95.up = p_totArabLand;\nv_devOneCrop.up(curPlots) = 1;\n$iftheni.constraints defined constraints\n  v_devUserShares.up(constraints,curCrops,curCrops1) = p_totArabLand;\n$endif.constraints\n$iftheni.labour defined p_availLabour\n  v_devLabour.up(months) = 15000;\n$endif.labour\noption optCR=0.02;\nmodel Fruchtfolge /\n  e_obje\n  e_totGM\n  e_maxShares\n  e_oneCropPlot\n  e_man_balance\n  e_170_avg\n  $$ifi \"%duev2020%\"==\"true\" e_170_plots\n$iftheni.constraints defined constraints\n  e_minimumShares\n  e_maximumShares\n$endif.constraints\n  e_efa\n  e_75diversification\n  e_95diversification\n$iftheni.labour defined p_availLabour\n  e_maxLabour\n$endif.labour\n/;\nsolve Fruchtfolge using MIP maximizing v_obje;\nset fullMonths /\r\n  'Januar'\r\n  'Februar'\r\n  'März'\r\n  'April'\r\n  'Mai'\r\n  'Juni'\r\n  'Juli'\r\n  'August'\r\n  'September'\r\n  'Oktober'\r\n  'November'\r\n  'Dezember'\r\n/;\r\nset bool / true, false /;\r\nset toBool(*,bool) /\r\n  catchCrop.true  YES\r\n  noCatchCrop.false YES\r\n  autumnFert.true YES\r\n  noAutumnFert.false YES\r\n/;\r\n\r\nscalar \r\n  warningsCount\r\n  curWarning\r\n;\r\nwarningsCount = sum(curCrops $ v_devShares.l(curCrops), 1)\r\n                 + 1 $ v_devEfa5.l \r\n                 + 1 $ v_devEfa75.l \r\n                 + 1 $ v_devEfa95.l\r\n                 + sum(curPlots $ v_devOneCrop.l(curPlots), 1)\r\n                 $$iftheni.constraints defined constraints\r\n                   + sum((constraints,curCrops,curCrops1) $ v_devUserShares.l(constraints,curCrops,curCrops1), 1)\r\n                 $$endif.constraints\r\n                 $$iftheni.labour defined p_availLabour\r\n                   + sum(months $ v_devLabour.l(months), 1)\r\n                 $$endif.labour\r\n;\r\ncurWarning = 0;\r\n\r\ndisplay warningsCount,curWarning;\r\nFile results / \"%random%\" /;\r\nresults.lw = 0;\r\nput results;\r\nput \"{\"\r\nput '\"model_status\":',  Fruchtfolge.modelstat, \",\" /;\r\nput '\"solver_status\":', Fruchtfolge.solvestat, \",\" /;\r\n\r\nif ( ((Fruchtfolge.modelstat ne 1) and (Fruchtfolge.modelstat ne 8)),\r\n    put '\"error_message\": \"Infeasible model.\"' /;\r\n  ELSE\r\n    put '\"objective\":', v_totGM.l, \",\" /;\r\n* add warnings if slack variables have non 0 levels\r\n    put '\"warnings\": [' /;\r\n\r\n    if ((sum(curCrops, v_devShares.l(curCrops)) > 0),\r\n      loop(curCrops $ v_devShares.l(curCrops),\r\n        put$(v_devShares.l(curCrops) > 0) '\"Maximaler Fruchtfolgeanteil von ', curCrops.tl, ' konnte nicht eingehalten werden.\"'/;\r\n        curWarning = curWarning + 1;\r\n        put$(curWarning < warningsCount) \",\" /;\r\n      )\r\n    );\r\n    if ((v_devEfa5.l > 0),\r\n      put '\"Konnte 5% ÖVF nicht einhalten. Prüfen, ob Sommerungen vorhanden sind, bzw. ob ZF Anbau erlaubt wurde.\"' /;\r\n      curWarning = curWarning + 1;\r\n      put$(curWarning < warningsCount) \",\" /;\r\n    );\r\n    if ((v_devEfa75.l > 0),\r\n      put '\"Konnte 75% Greening-Regel nicht einhalten\"' /;\r\n      curWarning = curWarning + 1;\r\n      put$(curWarning < warningsCount) \",\" /;\r\n    );\r\n    if ((v_devEfa95.l > 0),\r\n      put '\"Konnte 95% Greening-Regel nicht einhalten\"' /;\r\n      curWarning = curWarning + 1;\r\n      put$(curWarning < warningsCount) \",\" /;\r\n    );\r\n    if ((sum(curPlots, v_devOneCrop.l(curPlots)) > 0),\r\n      loop(curPlots $ v_devOneCrop.l(curPlots),\r\n        put$(v_devOneCrop.l(curPlots) > 0) '\"Keine mögliche Nachfrucht für ', curPlots.tl, ' mit den aktuellen Anbaupause/Nachfruchtwirkungen.\"'/;\r\n        curWarning = curWarning + 1;\r\n        put$(curWarning < warningsCount) \",\" /;\r\n      )\r\n    );\r\n    $$iftheni.constraints defined constraints\r\n      if ((sum((constraints,curCrops,curCrops1), v_devUserShares.l(constraints,curCrops,curCrops1)) > 0),\r\n        loop((constraints,curCrops,curCrops1) $ v_devUserShares.l(constraints,curCrops,curCrops1),\r\n          put$(v_devUserShares.l(constraints,curCrops,curCrops1) > 0) '\"Konnte Restriktion für ', constraints.tl, ' nicht einhalten.\"'/;\r\n          curWarning = curWarning + 1;\r\n          put$(curWarning < warningsCount) \",\" /;\r\n        ) \r\n      ); \r\n    $$endif.constraints\r\n    $$iftheni.labour defined p_availLabour\r\n      if ((sum(months, v_devLabour.l(months)) > 0),\r\n        loop((months,fullMonths) $ ( v_devLabour.l(months) $ (months.pos eq fullMonths.pos)),\r\n          put$(v_devLabour.l(months) > 0) '\"Konnte maximale Arbeitszeit für ', fullMonths.tl, ' nicht einhalten.\"'/;\r\n          curWarning = curWarning + 1;\r\n          put$(curWarning < warningsCount) \",\" /;\r\n        )\r\n      );\r\n    $$endif.labour\r\n\r\n    put '],' /; \r\n* write recommendations from optimisation to JSON file\r\n    put '\"recommendation\":', \"{\"/;\r\n    loop((curPlots),\r\n      loop(curCrops,\r\n        loop (manAmounts,\r\n         loop (solidAmounts,\r\n           loop (catchCrop,\r\n            loop (autumnFert,\r\n              put$(v_binCropPlot.l(curCrops,curPlots,manAmounts,solidAmounts,catchCrop,autumnFert) > 0) \r\n                '\"', curPlots.tl, '\": {', \r\n                '\"crop\": \"', curCrops.tl, '\",', \r\n                '\"manAmount\": ', manAmounts.tl, ',',\r\n                '\"solidAmount\": ', solidAmounts.tl, ',',\r\n                '\"catchCrop\":', catchCrop.tl, ',',\r\n                '\"autumnFert\":', autumnFert.tl, \r\n                '}' /\r\n            );\r\n           );\r\n         );\r\n        );\r\n      );\r\n      put$(curPlots.pos < card(curPlots)) \",\" /\r\n    );\r\n    put \"}\" /;\r\n);\r\nput \"}\" /;\r\nputclose;\r\n\n"